import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { ScrollArea } from './ui/scroll-area';
import { Badge } from './ui/badge';
import { Bot, X, Send, Sparkles, HelpCircle, FileUp, Download, Brain, Settings } from 'lucide-react';
import { motion, AnimatePresence } from 'motion/react';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

const ASSISTANT_KNOWLEDGE = {
  general: {
    welcome: "Bonjour! Je suis votre assistant intelligent pour le syst√®me de classification d'exoplan√®tes NASA Kepler. Je peux vous aider √† utiliser l'application, comprendre les fonctionnalit√©s, et r√©pondre √† vos questions. Comment puis-je vous aider aujourd'hui?",
    capabilities: "Je peux vous aider avec:\n‚Ä¢ üìä Pr√©dictions manuelles et par CSV\n‚Ä¢ ü§ñ S√©lection et configuration des mod√®les ML\n‚Ä¢ üìà Interpr√©tation des m√©triques\n‚Ä¢ üîß Ajustement des hyperparam√®tres\n‚Ä¢ üì• Import/export de donn√©es CSV\n‚Ä¢ ‚úÖ Syst√®me de feedback"
  },
  predict: {
    manual: "Pour faire une pr√©diction manuelle:\n1. S√©lectionnez un mod√®le ML (XGBoost recommand√©, F1: 94%)\n2. Remplissez les 20 caract√©ristiques Kepler ou cliquez 'Load Example Data'\n3. Cliquez 'Classify Exoplanet'\n4. Vous serez automatiquement redirig√© vers l'onglet Results\n\nLes r√©sultats incluent: Confirm√© (2), Candidat (1), ou Faux Positif (0)",
    csv: "Pour pr√©dictions par lot CSV:\n1. T√©l√©chargez le template via 'CSV Template' (g√©n√®re des donn√©es al√©atoires)\n2. Ajoutez vos donn√©es (20 colonnes requises)\n3. Cliquez 'Upload CSV for Batch Prediction'\n4. Le fichier avec pr√©dictions se t√©l√©charge automatiquement (nom_original_predictions.csv)\n\n‚ö†Ô∏è Les pr√©dictions CSV ne sont pas ajout√©es √† l'historique Results (uniquement pour export).",
    features: "Les 20 caract√©ristiques NASA Kepler incluent:\n‚Ä¢ koi_score: Score de d√©tection [0-1]\n‚Ä¢ koi_prad: Rayon plan√©taire [R‚äï]\n‚Ä¢ koi_period: P√©riode orbitale [jours]\n‚Ä¢ koi_insol: Flux d'insolation [S‚äï]\n‚Ä¢ Et 16 autres m√©triques de transit et d'erreur\n\nToutes sont essentielles pour la classification pr√©cise."
  },
  models: {
    overview: "5 mod√®les ML disponibles:\n\nü•á XGBoost (Recommand√©)\n‚Ä¢ F1-Macro: 94.5%\n‚Ä¢ Meilleur √©quilibre\n\nü•à Random Forest\n‚Ä¢ F1-Macro: 93.2%\n‚Ä¢ Robuste aux outliers\n\nü•â SVM\n‚Ä¢ F1-Macro: 91.8%\n‚Ä¢ Bon pour donn√©es lin√©aires\n\n4Ô∏è‚É£ KNN\n‚Ä¢ F1-Macro: 89.7%\n‚Ä¢ Simple et interpr√©table\n\n5Ô∏è‚É£ Logistic Regression\n‚Ä¢ F1-Macro: 87.3%\n‚Ä¢ Baseline rapide",
    metrics: "M√©triques de performance:\n\n‚Ä¢ Accuracy: Pr√©cision globale\n‚Ä¢ Precision: Proportion de vrais positifs\n‚Ä¢ Recall: Capacit√© √† d√©tecter les positifs\n‚Ä¢ F1-Macro: Moyenne harmonique non pond√©r√©e (√©quitable multiclasse)\n‚Ä¢ F1-Weighted: Moyenne pond√©r√©e par classe\n‚Ä¢ Confusion Matrix: D√©tails par classe\n\nF1-Macro est notre m√©trique principale pour √©viter le biais de classe."
  },
  hyperparameters: {
    overview: "L'onglet Hyperparameters permet d'ajuster:\n\n‚Ä¢ XGBoost: n_estimators, learning_rate, max_depth\n‚Ä¢ Random Forest: n_estimators, max_depth, min_samples_split\n‚Ä¢ SVM: C, kernel, gamma\n‚Ä¢ KNN: n_neighbors, weights\n‚Ä¢ Logistic Regression: C, penalty\n\nModifiez les param√®tres et observez l'impact sur les m√©triques!",
    tuning: "Conseils d'ajustement:\n\nüìà Overfitting? R√©duisez max_depth ou augmentez regularization (C)\nüìâ Underfitting? Augmentez n_estimators ou r√©duisez regularization\n‚ö° Trop lent? R√©duisez n_estimators\nüéØ Meilleur √©quilibre? Exp√©rimentez avec learning_rate"
  },
  feedback: {
    usage: "Le syst√®me de feedback am√©liore les mod√®les:\n\n1. Allez dans l'onglet Results\n2. Consultez vos pr√©dictions r√©centes\n3. Cliquez 'Correct' ou 'Incorrect' selon votre expertise\n4. Les m√©triques du mod√®le se mettent √† jour en temps r√©el\n\nVos feedbacks aident √† affiner la pr√©cision continuellement!"
  },
  csv: {
    format: "Format CSV requis:\n\n‚úÖ Header obligatoire avec les 20 noms de colonnes\n‚úÖ Colonnes s√©par√©es par virgules\n‚úÖ Valeurs num√©riques (pas de texte)\n‚úÖ Une ligne = une observation\n\n‚ùå Colonnes manquantes\n‚ùå Formats de date ou texte\n‚ùå Fichiers Excel (.xlsx)\n\nUtilisez 'Download CSV Template' pour le format correct!",
    output: "Le CSV de r√©sultats contient:\n\n‚Ä¢ Toutes vos colonnes d'entr√©e (20 features)\n‚Ä¢ prediction: 0/1/2 (num√©rique)\n‚Ä¢ prediction_label: False Positive/Candidate/Confirmed\n‚Ä¢ confidence: Niveau de confiance [0-1]\n‚Ä¢ model: Nom du mod√®le utilis√©\n‚Ä¢ timestamp: Date/heure ISO de pr√©diction\n\nParfait pour analyses ult√©rieures dans Excel, Python, R!"
  }
};

const getAssistantResponse = (userMessage: string): string => {
  const msg = userMessage.toLowerCase();

  // Greetings
  if (msg.match(/^(bonjour|salut|hello|hi|hey|coucou)/)) {
    return ASSISTANT_KNOWLEDGE.general.welcome;
  }

  // Capabilities
  if (msg.match(/aide|help|capacit√©|fonction|peut faire|capable/)) {
    return ASSISTANT_KNOWLEDGE.general.capabilities;
  }

  // Manual prediction
  if (msg.match(/pr√©diction manuelle|comment pr√©dire|faire.*pr√©diction|classify/)) {
    return ASSISTANT_KNOWLEDGE.predict.manual;
  }

  // CSV prediction
  if (msg.match(/csv|batch|lot|fichier|upload|t√©l√©charger.*donn√©es/)) {
    if (msg.match(/format|structure|colonnes|requises|template/)) {
      return ASSISTANT_KNOWLEDGE.csv.format;
    }
    if (msg.match(/r√©sultat|output|sortie|download/)) {
      return ASSISTANT_KNOWLEDGE.csv.output;
    }
    return ASSISTANT_KNOWLEDGE.predict.csv;
  }

  // Features
  if (msg.match(/caract√©ristique|feature|koi_|20.*colonnes|donn√©es.*kepler/)) {
    return ASSISTANT_KNOWLEDGE.predict.features;
  }

  // Models
  if (msg.match(/mod√®le|model|xgboost|random.*forest|svm|knn|logistic|quel.*mod√®le|meilleur/)) {
    if (msg.match(/m√©trique|performance|accuracy|f1|precision|recall/)) {
      return ASSISTANT_KNOWLEDGE.models.metrics;
    }
    return ASSISTANT_KNOWLEDGE.models.overview;
  }

  // Metrics
  if (msg.match(/m√©trique|f1|accuracy|precision|recall|performance|confusion.*matrix/)) {
    return ASSISTANT_KNOWLEDGE.models.metrics;
  }

  // Hyperparameters
  if (msg.match(/hyperparam√®tre|hyperparameter|ajuster|tuning|param√®tre|configuration/)) {
    if (msg.match(/conseil|tip|optimiser|am√©liorer|overfitting|underfitting/)) {
      return ASSISTANT_KNOWLEDGE.hyperparameters.tuning;
    }
    return ASSISTANT_KNOWLEDGE.hyperparameters.overview;
  }

  // Feedback
  if (msg.match(/feedback|retour|correct|incorrect|am√©liorer.*mod√®le/)) {
    return ASSISTANT_KNOWLEDGE.feedback.usage;
  }

  // Results tab
  if (msg.match(/r√©sultat|result|voir.*pr√©diction|historique|clear.*history/)) {
    return "L'onglet Results affiche:\n\n‚Ä¢ Vos 200 derni√®res pr√©dictions manuelles\n‚Ä¢ Horodatage et mod√®le utilis√©\n‚Ä¢ Niveau de confiance\n‚Ä¢ Caract√©ristiques cl√©s (p√©riode, rayon, etc.)\n‚Ä¢ Boutons de feedback\n‚Ä¢ Bouton 'Clear History' pour vider l'historique\n\n‚ö†Ô∏è Les pr√©dictions CSV batch ne sont PAS ajout√©es √† l'historique (uniquement export direct).";
  }

  // Navigation
  if (msg.match(/navigation|onglet|tab|page|aller/)) {
    return "4 onglets disponibles:\n\nüéØ Predict: Saisie manuelle ou upload CSV\nüìä Model Metrics: Comparer les 5 mod√®les\nüìã Results: Historique (max 200) et feedback\n‚öôÔ∏è Hyperparameters: Ajuster les param√®tres\n\nNote: Navigation auto vers Results SEULEMENT pour pr√©dictions manuelles. CSV batch t√©l√©charge automatiquement sans navigation.";
  }

  // Default - suggest topics
  return "Je peux vous aider avec:\n\n‚Ä¢ 'Comment faire une pr√©diction manuelle?'\n‚Ä¢ 'Comment utiliser les fichiers CSV?'\n‚Ä¢ 'Quel mod√®le choisir?'\n‚Ä¢ 'Comment ajuster les hyperparam√®tres?'\n‚Ä¢ 'Comment donner du feedback?'\n‚Ä¢ 'Expliquer les m√©triques F1'\n\nPosez-moi une question ou choisissez un sujet!";
};

export function AIAssistant() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: ASSISTANT_KNOWLEDGE.general.welcome,
      timestamp: new Date()
    }
  ]);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const scrollRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [messages]);

  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  const handleSend = async () => {
    if (!input.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsTyping(true);

    // Simulate typing delay
    await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));

    const response = getAssistantResponse(input);
    const assistantMessage: Message = {
      id: (Date.now() + 1).toString(),
      role: 'assistant',
      content: response,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, assistantMessage]);
    setIsTyping(false);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const quickActions = [
    { icon: FileUp, label: "Upload CSV", query: "Comment utiliser les fichiers CSV?" },
    { icon: Brain, label: "Mod√®les", query: "Quel mod√®le choisir?" },
    { icon: Settings, label: "Hyperparam√®tres", query: "Comment ajuster les hyperparam√®tres?" },
    { icon: HelpCircle, label: "Guide", query: "aide" }
  ];

  const handleQuickAction = (query: string) => {
    setInput(query);
    setTimeout(() => handleSend(), 100);
  };

  return (
    <>
      {/* Floating button */}
      <AnimatePresence>
        {!isOpen && (
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0, opacity: 0 }}
            className="fixed bottom-6 right-6 z-50"
          >
            <Button
              onClick={() => setIsOpen(true)}
              size="lg"
              className="h-14 w-14 rounded-full bg-gradient-to-br from-purple-600 to-blue-600 hover:from-purple-500 hover:to-blue-500 shadow-lg hover:shadow-xl transition-all"
            >
              <Sparkles className="h-6 w-6" />
            </Button>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Chat window */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.95 }}
            className="fixed bottom-6 right-6 z-50 w-[400px] max-h-[600px]"
          >
            <Card className="bg-slate-800 border-slate-700 shadow-2xl">
              <CardHeader className="pb-3 bg-gradient-to-r from-purple-900/50 to-blue-900/50 border-b border-slate-700">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="h-10 w-10 rounded-full bg-gradient-to-br from-purple-600 to-blue-600 flex items-center justify-center">
                      <Bot className="h-5 w-5 text-white" />
                    </div>
                    <div>
                      <CardTitle className="text-white flex items-center gap-2">
                        Assistant AI
                        <Badge variant="outline" className="text-xs text-green-400 border-green-600">
                          En ligne
                        </Badge>
                      </CardTitle>
                      <CardDescription className="text-slate-400 text-xs">
                        Votre guide intelligent
                      </CardDescription>
                    </div>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setIsOpen(false)}
                    className="h-8 w-8 p-0 text-slate-400 hover:text-white hover:bg-slate-700"
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </CardHeader>

              <CardContent className="p-0">
                <ScrollArea className="h-[380px] p-4" ref={scrollRef}>
                  <div className="space-y-4">
                    {messages.map((message) => (
                      <div
                        key={message.id}
                        className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                      >
                        <div
                          className={`max-w-[85%] rounded-lg px-4 py-2 ${
                            message.role === 'user'
                              ? 'bg-purple-600 text-white'
                              : 'bg-slate-700 text-slate-100'
                          }`}
                        >
                          <p className="whitespace-pre-wrap text-sm">{message.content}</p>
                          <p className="text-xs mt-1 opacity-60">
                            {message.timestamp.toLocaleTimeString('fr-FR', { 
                              hour: '2-digit', 
                              minute: '2-digit' 
                            })}
                          </p>
                        </div>
                      </div>
                    ))}
                    {isTyping && (
                      <div className="flex justify-start">
                        <div className="bg-slate-700 rounded-lg px-4 py-2">
                          <div className="flex gap-1">
                            <motion.div
                              animate={{ opacity: [0.4, 1, 0.4] }}
                              transition={{ duration: 1, repeat: Infinity, delay: 0 }}
                              className="w-2 h-2 bg-slate-400 rounded-full"
                            />
                            <motion.div
                              animate={{ opacity: [0.4, 1, 0.4] }}
                              transition={{ duration: 1, repeat: Infinity, delay: 0.2 }}
                              className="w-2 h-2 bg-slate-400 rounded-full"
                            />
                            <motion.div
                              animate={{ opacity: [0.4, 1, 0.4] }}
                              transition={{ duration: 1, repeat: Infinity, delay: 0.4 }}
                              className="w-2 h-2 bg-slate-400 rounded-full"
                            />
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </ScrollArea>

                {/* Quick actions */}
                {messages.length <= 2 && (
                  <div className="px-4 py-2 border-t border-slate-700 bg-slate-800/50">
                    <p className="text-xs text-slate-400 mb-2">Actions rapides:</p>
                    <div className="grid grid-cols-2 gap-2">
                      {quickActions.map((action) => (
                        <Button
                          key={action.label}
                          variant="outline"
                          size="sm"
                          onClick={() => handleQuickAction(action.query)}
                          className="border-slate-600 text-slate-300 hover:bg-slate-700 text-xs h-8"
                        >
                          <action.icon className="h-3 w-3 mr-1" />
                          {action.label}
                        </Button>
                      ))}
                    </div>
                  </div>
                )}

                {/* Input */}
                <div className="p-4 border-t border-slate-700 bg-slate-800">
                  <div className="flex gap-2">
                    <Input
                      ref={inputRef}
                      value={input}
                      onChange={(e) => setInput(e.target.value)}
                      onKeyPress={handleKeyPress}
                      placeholder="Posez une question..."
                      className="bg-slate-700 border-slate-600 text-white placeholder:text-slate-400"
                      disabled={isTyping}
                    />
                    <Button
                      onClick={handleSend}
                      disabled={!input.trim() || isTyping}
                      className="bg-purple-600 hover:bg-purple-500"
                    >
                      <Send className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}